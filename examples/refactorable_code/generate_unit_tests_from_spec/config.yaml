prompts:
  generate: >-
    I need examples of Python code that require refactoring for a project, plus unit tests that
    can verify the functionality of the code before and after refactoring.

    Your goal is to create unit tests for a Python function that will be created using the
    following spec:

    <spec>
    purpose: {purpose}
    name: {name}
    signature: {signature}
    length: {length}
    code_smells: {code_smells}
    language: {language}
    </spec>

    Make sure to import the function being tested. The name of the module can be derived from this
    template: func_{id}_{name}

    Follow best practices for unit testing and include proper assertions for each test case. The
    units test should thoroughly test the function. Any libraries you anticipate being used by
    the function should be mocked.

    Follow these additional instructions:

      - Generate complete test functions using pytest style (no test class needed).
      - Include proper imports and any necessary setup/teardown.
      - Make sure to include proper assertions for each test case.

    Remember: do not write the actual Python function. Instead, write the unit tests that will be
    used to verify the functionality of the function.

    Return your final unit tests in code wrapped in ```python code block.
